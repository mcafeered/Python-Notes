When SSH'ing into the OP Staions use -Y

Using vim 
use :set nonu  to unset line numbers for copying
delete lines using :(start line number) (end line number) d
SHIFT+O to go over line
o to go under 
press u to undo previous mistake

vim settings (edit .vimrc in home directory ~)
linesyntax enable
set tabstop=4
set shiftwidth=4
set expandtab
set number
filetype indent on
set autoindent

git clone https://git.cybbh.space/programming/python/public

sudo apt update ; sudo apt-get install apt-transport-https ca-certificates -y ; sudo update-ca-certificates

use .split() to split a string into a list ex. string.split(defines what the string is plit by like .)
use ''.join() (the '' (code for nothing) signifies what the operand joins the value in () with) 

use .input() to prompt for the user to type something which is then turned into a string that can be set as a variable ex. string = input("type sumtin")

use ==, !=, <, >, <=, >= to check if things are equivalent and/or true
use *in* to check for values inside a list

use if statements to check if a condition is true or not ex. if <condition>: along with elif and else, the interpreter goes down the code from top to bottom
use int(), float(), and str() to turn user inputs into integers, floats and strings respectively, must reassign variables to permanently convert them 
use *and*(both/all conditions met), *or*(any of the conditions met) to add extra conditions to if elif statements

run stuff using ./ or python3, follow either with the file

use <string>.isnumeric() to check if a string has all numbers in it or not

loops iterate repeatedly to step through data sets ex. while <condition> will do whatever instruction are under the loop until the condition is not true or a break command is given
can use a counter to limit loops ex. while count < 10: count += 1 
for loops use the range() function like range(20) to create a range of 0 to 20, if a list is given a string it will turn each individual character in that string into a value in the list
can make a list of numbers using list(range(whatever)) 
use for loops like *for num in <list>:* then give what should happen for each value in said list, num can be included in the executing part to compare it to other values or print it
use <list>.append() to add values to a list
Tuples cant be added to but still can be iterated through to print out values 

can get multiple values in a list but not all by doin <list>[0:4] which will omit the last value and everything after or even do <list>[0:4:2] to also only step a certain amount and grab certain values within that range
use <list>[::-1] to reverse the list ex. 1 2 3 4 to 4 3 2 1 also use <list>[:3:-1] which follows the start stop step architecture which means it stops at 3 but goes backwards meaning it has every value from the end until that 3rd value

use with open(<text.file>, <permissions>(w, r))as <fileVar> to use the commands <fileVar>.read() *gives entire file as string and can have a number in the () to define the amount of characters*, .readline(s)() *gives entire file split into lines in a list when it is readlines()* (strings are iterable via each character through the len() method)
string slicing - <fileVar>[start:stop:step] as opposed to range which is range(start,stop,step)

Basic script values

#!/bin/usr/python3 

chmod either 755 or +x to give permissions for execution

ls -l to check permissions

a = whatever - int
a = 'whatever' - string
a = whatever.whatever - float
a / b - division
a // b - integer division (no rounding)
a * b - multiplication
a ** b - exponents
a % b - modulus
int(a) - turn float or string into int
a = [1,2,3] - list
a[2] - index in list
a[-1] - last in list

.vimrc settings
syntax enable
set tabstop=4
set shiftwidth=4
set expandtab
set number 
filetype indent on
set autoindent



Basic user input script with example of .format
  1 #!/usr/bin/python3
  2 
  3 user_input = input("what is your username? ")
  4 
  5 print("Hello {} welcome to Bikini Bottom" .format(user_input))



First exercise using .split to extract info from an email address (myattempt)
  1 #!/usr/bin/python3
  2 
  3 user_email = input("Please enter your email address:")
  4 usr_split = user_email.split("@")
  5 usr_name = usr_split[0].split(".")
  6 usr_firstName = usr_name[0]
  7 
  8 print("Good Morning {}, Welcome to {}".format(usr_firstName,usr_split[1]))
alternatively use domain = user_email.split("@")[1]    and 
firstname = user_email.split("@")[0].split('.')[0] for max efficiency



First real exercise using modulus to find divisibility and print certain strings if true (my attempt)
  1 #!/usr/bin/env python3
  2 
  3 userNum = input("Please enter a number: ")
  4 userNum = int(userNum)
  5 
  6 if userNum % 3 == 0 and userNum % 5 == 0:
  7     print("fizzbuzz")
  8 
  9 elif userNum % 3 == 0:
 10     print("fizz")
 11 
 12 elif userNum % 5 == 0:
 13     print("buzz")
 14 
 15 else:
 16     print(userNum)



Another exercise prompting the user for temp and a conversion type (my attempt)
  1 #!usr/bin/python3
  2 
  3 Temp = float(input("What temperature # would you like to convert? "))
  4 Degree = input("Convert your number Celsius or Fahrenheit? ")
  5 
  6 if Degree == "C" or Degree == "Celsius" or Degree == "celsius" or Degree == "c":
  7     Temp = (Temp - 32) * (5/9)
  8 
  9 elif Degree == "F" or Degree == "Fahrenheit" or Degree == "fahrenheit" or Degree == "f":
 10     Temp = (Temp * 1.8) + 32
 11 
 12 else:
 13     print("Incorrect Format")
 14 
 15 print("Your conversion is {}".format(Temp))



A script used to have the user guess a number and make sure it is a real number between 0 and 100 while also giving higher or lower answers for incorrect answers
  1 #!usr/bin/python3
  2 
  3 Correct = 23
  4 
  5 while True: 
  6     guess = input("Guess a number between 0 and 100: ") 
  7     if guess.isnumeric() == True:
  8         guess = float(guess)
  9         if guess > 100 or guess < 0:
 10             print("Enter an integer between 0 and 100")
 11         else:
 12             if guess == Correct:
 13                 print("WIN")
 14                 break
 15             elif guess > Correct:
 16                 print("Too high")
 17             else:
 18                 print("Too low")
 19     
 20     else:
 21         print("Please enter a positive integer")
 
 
 
 An example of how to iterate through lists and change values while adding them back into the list or creating a new list
  1 #!/usr/bin/env python3
  2 
  3 def invert(l):
  4     p = 0
  5     for i in l:
  6         l[p] = str(255 - int(i))
  7         p += 1
  8     return l 
  9     
 10 def inverted(l):
 11     NewList = []
 12     for i in l:
 13         NewList.append(str(255 - int(i)))
 14     return NewList



The following scripts were used on RuneAcademy to solve various with open('<txt.file>', '<permission>') as <fileVar> format



this script finds the total number of characters in a file
with open('travel_plans.txt', 'r')as myfile:
    num = len(myfile.read())



this script finds the total number of words in a file
with open('emotion_words.txt', 'r')as myfile:
    num_words = len(myfile.read().split())



this script finds the total amount of sentences in a file
with open('school_prompt.txt', 'r') as myfile:
    num_lines = len(myfile.readlines())



this script gets the first 30 characters of the file and saves them
with open('school_prompt.txt', 'r')as myfile:
    beginning_chars = myfile.read(30)



this script get the third word of every line in a file
three = []
with open('school_prompt.txt', 'r') as myfile:
        lines = myfile.readlines()
        for i in lines:
            three.append(i.split()[2])



this script gets each p character in the file and adds it to a file
p_words = []
with open('school_prompt.txt', 'r') as myfile:
    char = myfile.read().split()
    for i in char:
        if 'p' in i:
            p_words.append(i)



this script encodes a character into preset image values 
  3 def steg_encode_char(char, cover):
  4     charBin = format(ord(char), '0>8b')
  5     for i in range(0,8):
  6         coverBinL = list(format(int(cover[i]), '0>8b'))
  7         coverBinL[-1] = charBin[i]
  8         cover[i] = str(int(''.join(coverBinL), 2))



can count how many times letters pop up using dictionaries
for i in my str:
  if i in my dict[i] += 1
else:
  mydict[i] = 1


TEST QUESTION ANSWERS

#!/usr/bin/env python3

def q1(floatstr):
    return list(map(float, floatstr.split(',')))

    '''ANOTHER WAY

    newlist = []
    for i in sloatstr.split(','):
        newlist.append(float(i))
    
    return newlist

    OR

    return [float(i) for i in floatstr.split('.')]
    '''

    '''
    TLO: 112-SCRPY002, LSA 3,4
    Given the floatstr, which is a comma separated string of
    floats, return a list with each of the floats in the 
    argument as elements in the list.
    '''
    pass

def q2(*args):
    sumtotal = 0
    for num in args:
        sumtotal += num
    return sumtotal / len(args)

    '''ANOTHER WAY

    return sum(args)/len(args)
    '''
    '''
    TLO: 112-SCRPY006, LSA 3
    TLO: 112-SCRPY007, LSA 4
    Given the variable length argument list, return the average
    of all the arguments as a float
    '''


def q3(lst,n):
    return lst[-n:] #START STOP STEP

    '''
    TLO: 112-SCRPY004, LSA 3
    Given a list (lst) and a number of items (n), return a new 
    list containing the last n entries in lst.
    '''
    pass

def q4(strng):
    newlist = []

    list(strng)
    for i in strng:
        newlist.append(ord(i))
    return newlist

    '''ANOTHER WAY
    
    return[ord(i) for i in strng]

    OR

    return list(map(ord,strng))

    '''
                 '''

    '''
    TLO: 112-SCRPY004, LSA 1,2
    TLO: 112-SCRPY006, LSA 3
    Given an input string, return a list containing the ordinal numbers of 
    each character in the string in the order found in the input string.
    '''
    pass
    
ef q5(strng):
    return tuple(strng.split())

    '''
    TLO: 112-SCRPY002, LSA 1,3
    TLO: 112-SCRPY004, LSA 2
    Given an input string, return a tuple with each element in the tuple
    containing a single word from the input string in order.
    '''
    pass

def q6(catalog, order):

    total = 0
    for product, quantity in order:
        total += catalog[product] * quantity
    return total

    '''ANOTHER WAY

    return sum(catalog)[product]*quantity for product,quantity in order)

    '''

    '''
    TLO: 112-SCRPY007, LSA 2
    Given a dictionary (catalog) whose keys are product names and values are product
    prices per unit and a list of tuples (order) of product names and quantities,
    compute and return the total value of the order.

    Example catalog:
    {
        'AMD Ryzen 5 5600X': 289.99,
        'Intel Core i9-9900K': 363.50,
        'AMD Ryzen 9 5900X': 569.99
    }

    Example order:
    [
        ('AMD Ryzen 5 5600X', 5), 
        ('Intel Core i9-9900K', 3)
    ]

    Example result:
    2540.45 

    How the above result was computed:
    (289.99 * 5) + (363.50 * 3)
    '''
    pass

def q7(filename):
    with open(filename, 'r') as afile:
        Line = afile.readlines()
        return len(Line[0]) - 1

    '''
    TLO: 112-SCRPY005, LSA 1
    Given a filename, open the file and return the length of the first line 
    in the file excluding the line terminator.
    '''
    pass

def q8(filename,lst):
    stop = 'stop'
    with open(filename, 'w') as afile:
        for i in lst:
            if i.lower() == stop.lower():
                break
            else:
                afile.write(i+'\n')

    '''ANOTHER WAY TO DO .FORMAT

    afile.write(f'{i}\n')

    '''

    '''
    TLO: 112-SCRPY003, LSA 1
    TLO: 112-SCRPY004, LSA 1,2
    TLO: 112-SCRPY005, LSA 1
    Given a filename and a list, write each entry from the list to the file
    on separate lines until a case-insensitive entry of "stop" is found in 
    the list. If "stop" is not found in the list, write the entire list to 
    the file on separate lines.
    '''
    pass

def q9(miltime):
    if 300 <= miltime <= 1159:
        return "Good Morning"
    elif 1200 <= miltime <= 1559:
        return "Good Afternoon"
    elif 1600 <= miltime <= 2059:
        return "Good Evening"
    else:
        return "Good Night"


    '''
    TLO: 112-SCRPY003, LSA 1
    Given the military time in the argument miltime, return a string 
    containing the greeting of the day.
    0300-1159 "Good Morning"
    1200-1559 "Good Afternoon"
    1600-2059 "Good Evening"
    2100-0259 "Good Night"
    '''
    pass

def q10(numlist):
    for i in numlist:
        if i < 0:
            return False
            break
    return True

    '''ANOTHER WAY

    return all(map(lambda x: x >= 0,numlist))

    '''
    '''
    TLO: 112-SCRPY003, LSA 1
    TLO: 112-SCRPY004, LSA 1
    Given the argument numlist as a list of numbers, return True if all 
    numbers in the list are NOT negative. If any numbers in the list are
    negative, return False.
    '''
    pass

TEST QUESTION ANSWERS PART 2: Scooby Doo

#!/usr/bin/env python3

def q1(sentence):
    newlist = []
    joe = sentence.split()
    for i in range(1, len(joe) + 1): 
        newlist.append(joe[-i])
    return ' '.join(newlist)
    
    '''OTHER ANSWERS

    return ' '.join(reversed(sentence.split()))

    '''
    ''' 
    Given a string of multiple words separated by single spaces,
    return a new string with the sentence reversed. The words
    themselves should remain as they are. For example, given
    'it is accepted as a masterpiece on strategy', the returned
    string should be 'strategy on masterpiece a as accepted is it'.
    '''
    pass

def q2(n):
    newlist = []
    count = 1 
    for i in str(n):
        if count == 3:
            newlist.append(',')
            count = 0 
        newlist.append(i)
        count += 1
    return ''.join(newlist)
    
    '''OTHER ANSWERS

    return '{:,}'.format(n)

    '''
    
    ''' 
    Given a positive integer, return its string representation with
    commas seperating groups of 3 digits. For example, given 65535
    the returned string should be '65,535'.
    '''
    pass

def q3(lst0, lst1):
    return sorted(lst0 + lst1, reverse=True)
    
    ''' 
    Given two lists of integers, return a sorted list that contains
    all integers from both lists in descending order. For example,
    given [3,4,9] and [8,1,5] the returned list should be [9,8,5,4,3,1].
    The returned list may contain duplicates.
    '''
    pass

def q4(s1,s2,s3):
    if (s1+s2+s3)/3 > 50: 
        return 'GO'
    else:
        return 'NOGO'
    
    ''' 
    Given 3 scores in the range [0-100] inclusive, return 'GO' if
    the average score is greater than 50. Otherwise return 'NOGO'.
    '''
    pass
def q5(integer, limit):
    newlist = []
    for i in range(0,limit+1,integer):
        if i % 2 == 0 or i == 0:
            newlist.append(i)
    return list(map(int, newlist))

    '''OTHER ANSWERS THAT WORK 100% of the time

    multiples = []
    for i in range(0,limit+1):
        if (i%integer==0) and (i%2==0):
            multiples.append(i)
    return multiples

    OR

    return [for i in range(0,limit+1) if (i%integer==0) and (i%2==0)

    '''
    '''
    Given an integer and limit, return a list of even multiples of the
    integer up to and including the limit. For example, if integer==3 and
    limit==30, the returned list should be [0,6,12,18,24,30]. Note, 0 is
    a multiple of any integer except 0 itself.
    '''
    pass

def q6(f0, f1):
    with open(f0, 'r')as a, open(f1, 'r') as b:
        newlist = []
        a1 = a.readlines()
        b1 = b.readlines()
        for i in range(len(a1)):
            if a1[i] != b1[i]:
                newlist.append(i)
        return newlist

    '''OTHER ANSWERS

    diffs = []
    linenum = 0
    with open(f0) as fp0:
        with open(f1) as fp1:
            file0 = fp0.readlines()
            file1 = fp1.readlines()
    for i in file0:
        if i != file1[linenum]:
            diffs.append(linenum)
        linenum += 1

    return diffs

    '''
    '''
    Given two filenames, return a list whose elements consist of line numbers
    for which the two files differ. The first line is considered line 0.
    '''
    pass

def q7(lst):
    seen = []
    for i in lst:
        if i in seen:
            return i
        else:
            seen.append(i)


    '''
    Return the first duplicate value in the given list.
    For example, if given [5,7,9,1,3,7,9,5], the returned value should
    be 7.
    '''
    pass

def q8(strng):
    newlist = []
    for i in strng.split():
        newlist.append(len(i))
    answer = sorted(newlist)
    return answer[0]

    '''OTHER ANSWERS

    return len(min(strng.split(), key=len))

    OR

    smol = 100
    for i in strng.split():
        if len(i) < smol:
            smol = len(i)
    return smol

    '''
    '''
    Given a sentence as a string with words being separated by a single space,
    return the length of the shortest word.
    '''
    pass

def q9(strng):
    chars = []
    for i in strng:
        if i.isnumeric():
            chars.append(i)
    return chr(int(''.join(char)))

    '''
    Given an alphanumeric string, return the character whose ascii value
    is that of the integer represenation of all of the digits in the string
    concatenated in the order in which they appear. For example, given
    'hell9oworld7', the returned character should be 'a' which has
    the ascii value of 97.
    '''
    pass

def q10(arr):
    difference = arr[1] - arr[0]
    for i in range(len(arr)):
        if arr[i] + 1 != arr[i + difference]:
            return arr[i+1]
    '''OTHER WAYS

    for i in range(0,len(arr)-1):
        if arr[i+1] - arr[i] != 1:
            return arr[i+1}]

    '''
    '''
    Given a list of positive integers sorted in ascending order, return
    the first non-consecutive value. If all values are consecutive, return
    None. For example, given [1,2,3,4,6,7], the returned value should be 6. 
    '''
    pass



myip = '192.168.0.23' can be split using myip.split('.') 
compare using if int(myip.split('.')[-1]) <= 62:
                print("This IP falls within the specified range")
                
list slicing mylist[0:3] uses : as opposed to , mylist[start:stop:step], ex. mylist[::-1] reads the list in reverse, mylist[3::] starts at the 3rd index and goes to the end while mylist[::3] gets every third value, range is similar to this but holding a list of numbers in the range specified use mylist[:5] to get the last 5 in a list
use range(0,1024) for well known port range
    
    
use .format to turn names into emails like '{}.{}.{}@{}.com' (first, middle[0](middle initial), last, domain)

myDict = {} use mydict['Pvt'] = 'E-1' to add values and use keys to reference values and values to reference keys, when you iterate through a dictionary by default you get the keys, refrence the keys in the loop to get values

basic count code 
mydict = {}
mylist = ['ab', 'bc', 'lol', 'bc']
for i in mylist:
  mydict[i] += 1
else:
  mydict[i] += 1


can use list slicing with file io to get a certain number of characters ex. myfile.read()[:3} gets the first 3 characters

to copy files use
with open (file, 'r') as f0:
  with open (file2, 'w') as f1:
    f1.writelines(f0.readlines()can add [2] to specify what is added)


